
@startuml class_diagram
skinparam groupInheritance 3

package "Enums" {
    enum FloorType {
        WOOD
        TILE
        CARPET
    }

    enum RobotType {
        SCRUBBER
        SHAMPOO
        VACUUM
    }

    enum Status {
        ACTIVE
        INACTIVE
        ERROR
        BEINGFIXED
    }
}

package "Robot Hierarchy" {
    class Robot {
        - int id
        - RobotType type
        - Status status = Status::Active
        - int location
        - int tasks_completed
        - int tasks_attempted
        - int progress_task
        - int progress_queue
        - std::queue<int> queue
        - int battery_level
        - float failure_rate
        - std::mt19937 gen
        - std::uniform_real_distribution<float> float_distribution
        - std::uniform_real_distribution<float> fail_distribution
        - int pause_ticks

        + Robot()
        + Robot(RobotType type, int id)
        + Robot(RobotType type, int id, float failure_rate)
        + float getEfficiency()
        + void incrementTasksAttempted()
        + void incrementTasksCompleted()
        + int getTA()
        + int getTC()
        + int getId() const
        + Status getStatus()
        + int getLocation()
        + int getProgressTask()
        + int getProgressQueue()
        + std::queue<int> getQueue()
        + void addTask(int room)
        + void addTask(std::vector<int> rooms)
        + int getBatteryLevel()
        + void incrementBatteryLevel(int amt)
        + void setBatteryLevel(int amt)
        + void update()
        + static std::string typeToString(RobotType type)
        + static std::string statusToString(Status status)
        + static std::string getRobotTypeFullName(char type)
        + std::string toString()
        + RobotType getType()
        + float getFailureRate()
        + virtual nlohmann::json toJson()
        + void move(int room_num)
        + bool clean()
        + nlohmann::json reportError()
        + float getRandom()
        + float genFailRate()
        + float getFailRate()
        + void popQueue()
        + void setStatus(Status s)
        + void setId(int newId)
        + void setPauseTicks(int s)
        + void incrementPauseTicks()
        + int getPauseTicks()
        + void chargeRobot()
        + int timeRemaining()
    }



    class ScrubberRobot {
        +ScrubberRobot(int id)
        +ScrubberRobot(int id, float failure_rate)
        +nlohmann::json toJson() override
        -int WaterLevel
    }

    class ShampooRobot {
        +ShampooRobot(int id)
        +ShampooRobot(int id, float failure_rate)
        +nlohmann::json toJson() override
        -int ShampooLevel
    }

    class VacuumRobot {
        +VacuumRobot(int id)
        +VacuumRobot(int id, float failure_rate)
        +nlohmann::json toJson() override
        -int TrashbagLevel
    }

    Robot <|-- ScrubberRobot
    Robot <|-- ShampooRobot
    Robot <|-- VacuumRobot

    Robot ..> RobotType
    Robot ..> Status
}

package "Simulation and Map Management" {
    class Map {
        -std::string name
        -json rooms
        -int numRooms
        +Map()
        +Map(std::string name, std::map<std::string, JSON rooms)
        +std::string getName()
        +void setName(std::string mapName)
        +void updateRoomCleanliness(std::string roomId, std::string cleaningStatus)
        +std::string getRoomCleanliness(std::string roomId)
        +void updateRoomName(std::string roomId, std::string roomName)
        +std::string getFloorType(std::string roomId)
    }
    Map ..> FloorType


    class SimulationDriver {
        - std::vector<Robot> robots
        - std::unordered_set<int> usedIds
        - pthread_rwlock_t robotsLock
        - Map selectedMap
        - std::optional<std::reference_wrapper<MongoDBWrapper>> mongo_wrapper
        - int robot_index
        - Robot DEFAULT_ROBOT
        - std::set<int> alreadyAssigned
        - std::unordered_map<RobotType, std::vector<std::string>> type_mappings

        + SimulationDriver()
        + SimulationDriver(Map selectedMap)
        + void addRobot(Robot& robot)
        + Robot& removeRobot(int id)
        + void clear()
        + void toString()
        + int getRobotIndex()
        + int assignRobotIndex()
        + Map getSelectedMap()
        + Robot* getRobot(int id)
        + std::vector<nlohmann::json> getFleet()
        + void update_all()
        + void update(Robot& r)
        + RobotType stringToRobotType(std::string type)
        + int fixRobot(int id)
        + int chargeRobot(int id)
        + std::vector<int> assignmentModule(std::vector<int> tasks)
        + void setMongoWrapper(MongoDBWrapper& wrapper)
        - void constructRobot()
        - void reportSimError(nlohmann::json robotErr, std::string errorNotes)

        + std::chrono::system_clock::time_point start
    }

    SimulationDriver ..> Robot
    SimulationDriver ..> Map


}


package "wxWidgets GUI and Dashboards" {
    class MyWidget {
        + bool OnInit()
    }

    class MainFrame {
        + MainFrame(const wxString &title, const wxPoint &pos, const wxSize &size)
        + void OnClose(wxCloseEvent &e)
        + void OnExit(wxCommandEvent &event)
        + void goHome(wxCommandEvent &event)
        + void switchToEngineer(wxCommandEvent &event)
        + void switchToStaff(wxCommandEvent &event)
        + void switchToManager(wxCommandEvent &event)
        + void switchToSeniorManager(wxCommandEvent &event)
        + void switchToLiveDashboard(wxCommandEvent &event)
        + void addRobot(wxCommandEvent &event)
        + void deleteRobot(wxCommandEvent &event)
        + int findListItem(wxString id)
        + void refresh()
        + void assignTasks(wxCommandEvent &event)
        + void viewHistoricalData(wxCommandEvent &event)
        + void fixRobot(wxCommandEvent &event)
        + void feedback(wxCommandEvent &event)

        - wxPanel *mainPanel
        - wxPanel *mainMenu
        - wxPanel *engineerPanel
        - wxPanel *staffPanel
        - wxPanel *managerPanel
        - wxPanel *seniorManagerPanel
        - wxBoxSizer* mainSizer
        - WxDashboard* liveDashboard
        - WxHistoricalData* historicalDashboard
        - Map map
        - MongoDBWrapper mongo_wrapper
        - SimulationDriver simDriver
        - std::atomic<bool> quitRequested
        - std::thread updateThread
        - int integer
    }


    class WxDashboard {
        + WxDashboard(wxWindow* parent)
        + wxListView *robotListView
    }

    class WxHistoricalData {
        + WxHistoricalData(wxWindow* parent)
        + wxListView *historicalListView
    }

    class WxTaskbox {
        + WxTaskbox(wxWindow* parent, Map map)
        + std::vector<bool> GetCheckboxStates() const
        - std::vector<wxCheckBox*> checkboxes
    }

    MyWidget --> MainFrame 
    MainFrame *-- WxDashboard 
    MainFrame *-- WxHistoricalData
    MainFrame *-- WxTaskbox

}





package "Database Management" {
    class MongoDBWrapper {
        +MongoDBWrapper(const std::string& uri, const std::string& db_name, const std::string& active_collection_name, const std::string& removed_collection_name, const std::string& error_collection_name)
        +void upsertRobotData(nlohmann::json robotData)
        +void moveRobotToRemoved(int id)
        +void logError(nlohmann::json robotData)
        +nlohmann::json getAllDataAsJson(const std::string& collectionType)
        -mongocxx::client client_
        -mongocxx::database db_
    }

    SimulationDriver ..> MongoDBWrapper
    MainFrame ..> MongoDBWrapper
}

@enduml

