@startuml class_diagram
skinparam groupInheritance 3



class Dashboard{
    +Dashboard()                  
    +Dashboard(Robot robot)
    +Dashboard(std::vector<Robot> robots) 
    +void create_chart(std::vector<Robot> robots, std::string data_name) const
    +std::string get_feedback() const
    -std::vector<Robot> robots
}

class ErrorLog {
    +ErrorLog(Robot robot) 
    +ErrorLog(std::vector<Robot> robots) 
    -std::string description 
    -int timpestamp 
}

class LiveRobotDash{
    +LiveRobotDash(Robot robot)
    -Status status 
    -Map curr_map 
    -int location 
    -int progress_task 
    -int progress_queue 
    -int queue_length 
}

class MetricsDash{
    +MetricsDash(Robot robot) 
    +MetricsDash(std::vector<Robot> robot) 
    -float efficiency 
    -float erroWr_rate 
    -int runtime 
}

enum FloorType{
    WOOD
    TILE
    CARPET
}

enum RobotType{
    SCRUBBER
    SHAMPOO
    VACUUM
}

enum Status{
    ACTIVE
    INACTIVE
    ERROR
}

class Map{
    +std::string name   
    +std::map<std::string, JSON room>

    - Map();
    -Map(std::string name, std::map<std::string, JSON rooms)
    -std::string getName() { return name; }
    -void setName(std::string mapName) { name = mapName; }

    -void updateRoomCleanliness(std::string roomId, std::string cleaningStatus)
    -std::string getRoomCleanliness(std::string roomId) { return rooms[roomId][1]; }
    -void updateRoomName(std::string roomId, std::string roomName)
    -std::string getRoomName(std::string roomId) { return rooms[roomId][0]; }
}

class Robot{
    +Robot() 
        +Robot(RobotType type, int id) 
        +Robot(RobotType type, int id, Map currentMap) 
        +float getEfficiency() 
        +int getId() 
        +Status getStatus() 
        +int getLocation() 
        +int getProgressTask() 
        +int getProgressQueue() 
        +std::vector<int> getQueue() 
        +int getBatteryLevel() 
        +void update()  
        +std::string toString() 
        +std::string getMapName() 
        +RobotType getType() { return type  }
        +std::string getRoomStatus() 
        -bool clean()     
        -void reportError()     
        -void move(int room_num) 

        #int id
        #RobotType type
        #Status status = Status::Active
        #int location = 0
        #int tasks_completed
        #int tasks_attempted
        #int progress_task
        #int progress_queue
        #std::vector<int> queue
        #int battery_level
        #Map currentMap
}

Robot ..> RobotType
Robot ..> Status

class ScrubberRobot{
    +ScrubberRobot() 
    +ScrubberRobot(int id) 
    +ScrubberRobot(int id, Map currentMap) 
    -int WaterLevel 
    -bool clean() 
}


class ShampooRobot{
    +ShampooRobot()  
    +ShampooRobot(int id)  
    +ShampooRobot(int id, Map currentMap)  
    -int ShampooLevel  
    -bool clean()  
}

class VacuumRobot{
    +VacuumRobot()  
    +VacuumRobot(int id, Map currentMap)  
    +VacuumRobot(int id)  
    -int TrashbagLevel  
    -bool clean()   
}

Robot <|-- ScrubberRobot
Robot <|-- ShampooRobot
Robot <|-- VacuumRobot


Dashboard <|-- ErrorLog
Dashboard <|-- LiveRobotDash
Dashboard <|-- MetricsDash

Dashboard ..> MongoDBWrapper
Dashboard ..> Robot
Robot ..> Map
Map ..> FloorType
class MongoDBWrapper{
    +MongoDBWrapper(const std::string& uri, \nconst std::string& db_name, const std::string& collection_name)   
    +void insertRobotData(int id, const std::string& type, const std::string& status, 
                         int location, const std::string& map, const std::string& currentRoomStatus)   

    -mongocxx::client client_   
    -mongocxx::database db_   
    -mongocxx::collection collection_   
}

class AssignmentModule{
    -Map curr_map
    -long time
    -void close()
    +boolean assign(std::vector<Robot> fleet, std::vector<int> rooms)
    - Calendar calendar
    - SimulationDriver sd


}

AssignmentModule ..> Robot
AssignmentModule ..> SimulationDriver
SimulationDriver ..> MongoDBWrapper

class SimulationDriver{
        +SimulationDriver()
        +explicit SimulationDriver(std::vector<Robot> robots)
        +explicit SimulationDriver(Map selectedMap)
        +explicit SimulationDriver(std::vector<Robot> robots, Map selectedMap)
        +void addRobot(Robot robot)
        +Robot removeRobot(int id)
        +void clear()
        +void toString()
        +int getRobotIndex() { return robot_index; }
        +int assignRobotIndex()
        +Map getSelectedMap() { return selectedMap; }
        +void start_dashboard()
        +Robot* getRobot(int id)
        +std::vector<Robot> getFleet()

        -std::vector<Robot> robots
        -Map selectedMap
        -int robot_index = 0
}

class Main{
    + string staff_type
    -open_dashboard(string staff_type)
    -open_module(string staff_type)
}

Main ..> Dashboard
Main ..> AssignmentModule
SimulationDriver ..> Robot